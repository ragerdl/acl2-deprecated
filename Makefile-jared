# -*- mode: makefile -*-

# Makefile-jared
#
# This is Jared's proposed replacement for books/Makefile using cert.pl.
#
#  - It simplifies the build system, doing away with hundreds of Makefiles in
#    individual directories, and replacing them with this single file.  This is
#    possible because I've gone through and fixed up many books so that they
#    follow certain conventions, explained below.
#
#  - It increases (significantly) opportunities for parallelism, by doing away
#    with directory-level dependencies.  Essentially, any books that do not
#    have an include-book dependency can be built in parallel.  At the same
#    time, this means that books can be reorganized based on their logical
#    content, without regards to directory build order.
#
#  - It generally increases build-system automation.  We use "find" commands to
#    find Lisp files instead of maintaining (by hand) lists of directories.  We
#    also do not need to manually keep track of dependencies between
#    directories, etc.
#
# Basic usage:
#    make -f Makefile-jared -j <jobs> [<target>]
#
# Where:
#    - <jobs> is how many books you want to certify in parallel,
#        typically the number of cores on your machine
#    - <target> is optional and defaults to "all" when omitted,
#        or names the target you want to build (see below).
#
#          (Note: if some day this replaces books/Makefile, the "-f
#           Makefile-jared" part won't be needed.)
#
# Makefile-jared starts by automatically scanning for books and their
# dependencies.  This scanning can be slightly expensive, especially on slow
# NFS systems.  When you know that you haven't added or changed any books, you
# might prefer to avoid rescanning by adding NO_RESCAN=1 to the command line.
#
# In order to make the book- and dependency-scanning simple and reliable, books
# are expected to follow certain conventions.  These conventions are generally
# very similar to the previous behavior of cert.pl and Makefile-generic.
#
#   - We scan for lines like (include-book "foo") and (ld "foo.lisp"); for
#     dependency scanning to work, these commands must be on a single line and
#     can't be wrapped up in macros.  Occasionally it is useful to fool the
#     dependency scanner, e.g., in a multi-line comments you might do:
#
#        #| Here's an example of how to use this stuff:
#
#           (include-book ;; newline to fool dependency scanner
#             "foo")
#
#           (demo-of-how-to-use-foo)
#        |#
#
#   - Additional dependencies (e.g., on raw-lisp files or other kinds of data
#     files) can be added using depends-on comments, e.g.,
#
#        ; (depends-on "foo-raw.lsp")
#
#   - Certifiable books should be named foo.lisp
#   - Non-certifiable Lisp files should be named foo.lsp
#   - The instructions for certifying foo.lisp are found in:
#       foo.acl2, if it exists, or else
#       cert.acl2, if it exists, or else
#       default to simply (certify-book "foo" ? t)
#
# CHANGE/BOZO: In Makefile-jared (as in cert.pl), any certify-book lines given
# in the .acl2 file are ignored.  Instead, we generate the certify-book command
# to use by looking for comments like:
#
#         ; cert-flags: ? t :ttags :all
#
# These comments can be put in the individual foo.acl2 or (for directory-level
# defaults) in cert.acl2.  The default cert-flags are "? t".  Using special
# comments instead of certify-book forms means that the certification flags
# can't be hidden inside macros, possibly easing the job of an "evaluator."
#
# BOZO So far, I have gone through the ACL2 regression suite and replaced
# certify-book lines throughout .acl2 files with cert-flags comments.  However,
# for now I've left the certify-book commands intact, for compatiblity with
# Makefile-generic.  Eventually, we should not have both things in .acl2 files.
# Before we can do that, we'll need to change Makefile-generic to look for
# cert-flags instead of certify-book commands.  Alternately, maybe the scheme
# should be something like: if you give a certify-book command, we use it;
# otherwise we generate one using the cert-flags.


# STATUS / TODO LIST / MISSING FEATURES / BOZOS:
#
#  [DONE] Requires perl on the client machine (I think we've agreed this is
#         okay)
#
#  [DONE] Two-pass certification seems to work, using the cert.pl directive
#         cert_param(acl2x).  See for instance
#         books/make-event/stobj-test.acl2.
#
#  [DONE] How should cleaning work?
#
#    Using a find command has the advantage that it will get rid of old files
#    even after the .lisp files have been deleted.  It has the disadvantage
#    that it seems tricky to properly delete .h and .c files using a find
#    command.  An alternative would be to use CERT_PL_CERTS to generate a huge
#    list of files to remove.  This will require using xargs, etc., which is
#    gross, but so does the find command.  Blah.
#
#    We now implement the CERT_PL_CERTS-based approach, but using clean.pl,
#    which nicely deals with the whole too-many-arguments issue.  It seems to
#    perform well.  I think this is probably as good as we can do.
#
#  [BOZO] Does provisional certification work?
#
#  [BOZO] Add multi-lisp compilation stuff for Matt (might be easy)
#
#  [BOZO] Add support for ACL2(r).  Possibly the right way to do that would be
#         to use something like the $(info Scanning for books...)  sections
#         below, to set up the symlinks, and then just let everything else fall
#         out automatically.
#


ACL2 ?= acl2

SHELL := $(shell which bash)
STARTJOB ?= $(SHELL)

.SUFFIXES:
.SUFFIXES: .cert .lisp

.PHONY: all
all:

ifndef NO_RESCAN

$(info Scanning for books...)
REBUILD_MAKEFILE_BOOKS := $(shell \
  rm -f Makefile-books; \
  time find . -name "*.lisp" \
    | egrep -v '^(\./)?(interface|nonstd|centaur/quicklisp|clause-processors/SULFA)/' \
  > Makefile-books; \
  ls -l Makefile-books)
#$(info $(REBUILD_MAKEFILE_BOOKS))

$(info Scanning for dependencies...)
REBUILD_MAKEFILE_DEPS := $(shell \
  rm -f Makefile-deps Makefile-deps.out; \
  time (./cert.pl \
          --quiet \
          --static-makefile Makefile-deps \
          --cache Makefile-cache \
          --acl2-books `pwd` \
          --targets Makefile-books \
          1>&2) ;\
  echo 'MFDEPS_DEBUG := $$(shell echo Reading book deps ' \
       'Makefile-deps created on' `date` '1>&2)' \
    >> Makefile-deps; \
  ls -l Makefile-deps)
#$(info $(REBUILD_MAKEFILE_DEPS))
$(info Done scanning.)

endif

include Makefile-deps

$(info Determining ACL2 features (for ACL2 = $(ACL2)))
ACL2_FEATURES := $(shell \
  rm -f Makefile-features ; \
  ACL2_CUSTOMIZATION=NONE $(STARTJOB) -c \
     "$(ACL2) < cert_features.lsp &> Makefile-features.out" ;\
  ls -l Makefile-features)

# Only conditionally include Makefile-features, so that make clean works even
# if ACL2 isn't built.
-include Makefile-features
$(info ACL2_HAS_HONS     := $(ACL2_HAS_HONS))
$(info ACL2_HAS_PARALLEL := $(ACL2_HAS_PARALLEL))
$(info ACL2_HAS_REALS    := $(ACL2_HAS_REALS))
$(info Done with features.)



OK_CERTS := $(CERT_PL_CERTS)

ifeq ($(ACL2_HAS_HONS), )
$(info Excluding books that depend on ACL2(h))
OK_CERTS := $(filter-out $(CERT_PL_HONS_ONLY), $(OK_CERTS))
endif

# BOZO probably do something similar for ACL2(r)?


# We filter out a book that depends on provisional certification:
OK_CERTS := $(filter-out system/pcert/acl2x-pcert-test-2-include.cert, $(OK_CERTS))


# SLOW_BOOKS are books that are too slow to include as part of an ordinary
# regression.

SLOW_BOOKS := \
  workshops/2011/krug-et-al/support/MinVisor/setup-nested-page-tables.lisp


OK_CERTS := $(filter_out $(SLOW_BOOKS), $(OK_CERTS))

all: $(OK_CERTS)

everything : all $(SLOW_BOOKS)


# The critical path report will work only if you have set up certificate timing
# BEFORE you build the books.  See ./critpath.pl --help for details.

# BOZO I probably broke this, we shouldn't use --targets, we should use ok_certs...
critpath.txt : $(OK_CERTS)
	echo "Building critpath.txt..."
	time ./critpath.pl --targets Makefile-books > critpath.txt


# Handy targets for building subsets of the books... others are easy to add.

.PHONY: basic centaur coi workshops \
        workshop1999 workshop2000 workshop2001 workshop2002 \
        workshop2003 workshop2004 workshop2006 workshop2007 \
        workshop2009 workshop2011

basic : $(filter-out centaur/%, \
           $(filter-out coi/%, \
              $(filter-out workshops/%, $(OK_CERTS))))

centaur : $(filter centaur/%, $(OK_CERTS))

coi     : $(filter coi/%, $(OK_CERTS))

workshops : $(filter workshops/%, $(OK_CERTS))
workshop1999 : $(filter workshops/1999/%, $(OK_CERTS))
workshop2000 : $(filter workshops/2000/%, $(OK_CERTS))
workshop2001 : $(filter workshops/2001/%, $(OK_CERTS))
workshop2002 : $(filter workshops/2002/%, $(OK_CERTS))
workshop2003 : $(filter workshops/2003/%, $(OK_CERTS))
workshop2004 : $(filter workshops/2004/%, $(OK_CERTS))
workshop2006 : $(filter workshops/2006/%, $(OK_CERTS))
workshop2007 : $(filter workshops/2007/%, $(OK_CERTS))
workshop2009 : $(filter workshops/2009/%, $(OK_CERTS))
workshop2011 : $(filter workshops/2011/%, $(OK_CERTS))

# The `user' target allows one to specify the roots of the forest of
# books to be certified.
# Example (just remove "# " at the beginning of each line):
# make -f Makefile-jared -j 4 NO_RESCAN=1 ACL2=acl2h \
# ACL2_BOOK_CERTS=" \
# workshops/2006/cowles-gamboa-euclid/Euclid/ed6a.cert \
# workshops/2006/cowles-gamboa-euclid/Euclid/ed4bb.cert \
# " user
user : $(ACL2_BOOK_CERTS)


# CLEANING -------------------------------------------------------------------

# We delegate most of the cleaning process to clean.pl, a simple perl script
# that lets us take care not to delete certain kinds of files.  The clean.pl
# script will remove things like .cert and .fasl files.  But

CLEAN_FILES_EXPLICIT := \
   xdoc-impl/bookdoc.dat \
   Makefile-deps \
   Makefile-books \
   Makefile-features \
   Makefile-cache

MORECLEAN_FILES_EXPLICIT := \
   xdoc-impl/manual \
   centaur/manual

.PHONY: clean_books clean

clean_books:
	@echo "Using clean.pl to remove certificates, etc."
	./clean.pl

clean: clean_books
	@echo "Removing extra, explicitly temporary files."
	rm -rf $(CLEAN_FILES_EXPLICIT)
	cd centaur/quicklisp; $(MAKE) clean

moreclean: clean
	@echo "Removing even more generated files (documentation, etc)."
	rm -rf $(MORECLEAN_FILES_EXPLICIT)



.PHONY: dummy
dummy:

# Workshops/1999/multiplier is tricky because there are generated .lisp files
# involved.  Cert.pl can't scan these, so we have to add them manually.

workshops/1999/multiplier/fmul.cert: \
  workshops/1999/multiplier/fmul.lisp \
  workshops/1999/multiplier/rtl.cert

workshops/1999/multiplier/fmul.lisp: \
  workshops/1999/multiplier/compiler.cert \
  workshops/1999/multiplier/fmul.trans
	@echo "Making workshops/1999/multiplier/fmul.lisp"
	@cd workshops/1999/multiplier; \
              $(STARTJOB) -c "$(ACL2) < make-fmul.lsp &> fmul.lisp.log"
	@ls -l workshops/1999/multiplier/fmul.lisp \
               workshops/1999/multiplier/fmul-star.lisp

workshops/1999/multiplier/fmul-star.lisp: \
  workshops/1999/multiplier/fmul.lisp

workshops/1999/multiplier/fmul-star.cert: \
  workshops/1999/multiplier/spec.cert

workshops/1999/multiplier/spec.cert: \
  workshops/1999/multiplier/fmul.cert

workshops/1999/multiplier/proof.cert: \
  workshops/1999/multiplier/fmul-star.cert


# xdoc-impl is tricky because we have to generate bookdoc.dat.

xdoc-impl/bookdoc.dat: \
  xdoc-impl/acl2-customization.lsp \
  xdoc-impl/bookdoc.lsp \
  xdoc/package.lsp \
  $(wildcard xdoc/*.lisp) \
  $(wildcard xdoc-impl/*.lisp) \
  xdoc-impl/extra-packages.cert
	@echo "Making xdoc-impl/bookdoc.dat"
	@cd xdoc-impl; \
          $(STARTJOB) -c "$(ACL2) < bookdoc.lsp &> bookdoc.out"
	@ls -l xdoc-impl/bookdoc.dat

ifndef ACL2_HAS_REALS

# The following dependency is to be ignored in ACL2(r), where the
# relevant include-book in arithmetic-3/extra/ext.lisp is guarded by
# #-:non-standard-analysis.
arithmetic-3/extra/ext.cert: rtl/rel8/arithmetic/top.cert

endif

# BOZO.   make-event/local-elided stuff is tricky because it thinks it can tell whether
# local-elided.lisp was provisionally certified or not, which doesn't
# necessarily make any sense... this is the easiest way to fix it so that it
# works with provisional certification:

make-event/local-elided-include.pcert1: make-event/local-elided.cert

make-event/macros-include.pcert1: make-event/macros.cert

make-event/local-requires-skip-check-include.pcert1: \
  make-event/local-requires-skip-check.cert

# BOZO.  Similar bozo.

#system/pcert/acl2x-pcert-test-2-include.pcert1: \
#    system/pcert/acl2x-pcert-test-2.cert

# Multi-lisp compilation stuff for Matt.

# Note: these targets won't work unless you've already done a build using a
# "compatible" ACL2 (i.e., the same feature set) after first setting
# ACL2_SAVE_EXPANSION=t.

%.fasl: %.cert
	@echo "Making $$PWD/$@"
	echo '(ld `((include-book "$(patsubst %.fasl,%,$(@))" :load-compiled-file :comp :ttags :all))) (acl2::value :q) (acl2::exit-lisp)' | $(ACL2)

.PHONY: fasl
fasl : $(patsubst %.cert,%.fasl,$(OK_CERTS))
