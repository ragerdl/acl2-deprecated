# -*- mode: makefile -*-

# Makefile-jared
#
# This is Jared's proposed replacement for books/Makefile using cert.pl.
#
#  - It simplifies the build system, doing away with hundreds of Makefiles in
#    individual directories, and replacing them with this single file.  This is
#    possible because I've gone through and fixed up many books so that they
#    follow certain conventions, explained below.
#
#  - It increases (significantly) opportunities for parallelism, by doing away
#    with directory-level dependencies.  Essentially, any books that do not
#    have an include-book dependency can be built in parallel.  At the same
#    time, this means that books can be reorganized based on their logical
#    content, without regards to directory build order.
#
#  - It generally increases build-system automation.  We use "find" commands to
#    find Lisp files instead of maintaining (by hand) lists of directories.  We
#    also do not need to manually keep track of dependencies between
#    directories, etc.
#
# Basic usage:
#    make -f Makefile-jared -j <jobs> [<target>]
#
# Where:
#    - <jobs> is how many books you want to certify in parallel,
#        typically the number of cores on your machine
#    - <target> is optional and defaults to "all" when omitted,
#        or names the target you want to build (see below).
#
#          (Note: if some day this replaces books/Makefile, the "-f
#           Makefile-jared" part won't be needed.)
#
# Makefile-jared starts by automatically scanning for books and their
# dependencies.  This scanning can be slightly expensive, especially on slow
# NFS systems.  When you know that you haven't added or changed any books, you
# might prefer to avoid rescanning by adding NO_RESCAN=1 to the command line.
#
# In order to make the book- and dependency-scanning simple and reliable, books
# are expected to follow certain conventions.  These conventions are generally
# very similar to the previous behavior of cert.pl and Makefile-generic.
#
#   - We scan for lines like (include-book "foo") and (ld "foo.lisp"); for
#     dependency scanning to work, these commands must be on a single line and
#     can't be wrapped up in macros.  Occasionally it is useful to fool the
#     dependency scanner, e.g., in a multi-line comments you might do:
#
#        #| Here's an example of how to use this stuff:
#
#           (include-book ;; newline to fool dependency scanner
#             "foo")
#
#           (demo-of-how-to-use-foo)
#        |#
#
#   - Additional dependencies (e.g., on raw-lisp files or other kinds of data
#     files) can be added using depends-on comments, e.g.,
#
#        ; (depends-on "foo-raw.lsp")
#
#   - Certifiable books should be named foo.lisp
#   - Non-certifiable Lisp files should be named foo.lsp
#   - The instructions for certifying foo.lisp are found in:
#       foo.acl2, if it exists, or else
#       cert.acl2, if it exists, or else
#       default to simply (certify-book "foo" ? t)
#     These instructions specify argument to certify-book, for example:
#       ; cert-flags: ? t :ttags :all
#   - Books that depend on ACL2(h), such as centaur/tutorial/alu16-book.lisp,
#     contain this line:
#       ; cert_param: (hons-only)
#   - Two-pass certification is handled as follows, for example in
#     books/make-event/stobj-test.acl2:
#       ; cert_param: (acl2x)
#   - It's not clear that provisional certification is fully
#     supported.  For now, we implement it for two specific
#     directories; search below for "provisional certification" to see
#     how that's done.
#   - The "user" target allows one to restrict to specific
#     directories.  Search for "user" below to see an example.
#
# CHANGE/BOZO: In Makefile-jared (as in cert.pl), any certify-book lines given
# in the .acl2 file are ignored.  Instead, we generate the certify-book command
# to use by looking for comments like:
#
#         ; cert-flags: ? t :ttags :all
#
# These comments can be put in the individual foo.acl2 or (for directory-level
# defaults) in cert.acl2.  The default cert-flags are "? t".  Using special
# comments instead of certify-book forms means that the certification flags
# can't be hidden inside macros, possibly easing the job of an "evaluator."
#
# BOZO So far, I have gone through the ACL2 regression suite and replaced
# certify-book lines throughout .acl2 files with cert-flags comments.  However,
# for now I've left the certify-book commands intact, for compatiblity with
# Makefile-generic.  Eventually, we should not have both things in .acl2 files.
# Before we can do that, we'll need to change Makefile-generic to look for
# cert-flags instead of certify-book commands.  Alternately, maybe the scheme
# should be something like: if you give a certify-book command, we use it;
# otherwise we generate one using the cert-flags.


# STATUS / TODO LIST / MISSING FEATURES / BOZOS:
#
#  [DONE] Requires perl on the client machine (I think we've agreed this is
#         okay)
#
#  [DONE] Two-pass certification seems to work, using the cert.pl directive
#         cert_param(acl2x).  See for instance
#         books/make-event/stobj-test.acl2.
#
#  [DONE] How should cleaning work?
#
#    Using a find command has the advantage that it will get rid of old files
#    even after the .lisp files have been deleted.  It has the disadvantage
#    that it seems tricky to properly delete .h and .c files using a find
#    command.  An alternative would be to use CERT_PL_CERTS to generate a huge
#    list of files to remove.  This will require using xargs, etc., which is
#    gross, but so does the find command.  Blah.
#
#    We now implement the CERT_PL_CERTS-based approach, but using clean.pl,
#    which nicely deals with the whole too-many-arguments issue.  It seems to
#    perform well.  I think this is probably as good as we can do.


ACL2 ?= acl2

SHELL := $(shell which bash)
STARTJOB ?= $(SHELL)

.SUFFIXES:
.SUFFIXES: .cert .lisp

# Major top-level targets:
#   - ALL is the default
#   - EVERYTHING includes everything in ALL and also some slow books
#   - LITE is most of ALL, but with a few things excluded

.PHONY: all lite everything
all:

everything: all

all: lite

# It seems that info is defined starting in GNU make version 3.81.
# But version 3.80 seems to tolerate calls of info, simply ignoring
# them.  We could use a variable, as follows, so that you can set
# INFO=warning on the command line if you want to see the messages
# even with GNU make version 3.80.  But maybe this is too ugly, so we
# just leave the idea as a comment.
INFO := info
# Example: Prints "Makefile-jared:156: just a test" when invoked with
# INFO=warning; otherwise, same as $(info just a test).
$(eval $$($(INFO) just a test))

ifndef NO_RESCAN

$(info Scanning for books...)
REBUILD_MAKEFILE_BOOKS := $(shell \
  rm -f Makefile-books; \
  time find . -name "*.lisp" \
    | egrep -v '^(\./)?(interface|nonstd|centaur/quicklisp|clause-processors/SULFA)/' \
  > Makefile-books; \
  ls -l Makefile-books)
#$(info $(REBUILD_MAKEFILE_BOOKS))

$(info Scanning for dependencies...)
REBUILD_MAKEFILE_DEPS := $(shell \
  rm -f Makefile-deps Makefile-deps.out; \
  time (./cert.pl \
          --quiet \
          --static-makefile Makefile-deps \
          --cache Makefile-cache \
          --acl2-books `pwd` \
          --targets Makefile-books \
          1>&2) ;\
  echo 'MFDEPS_DEBUG := $$(shell echo Reading book deps ' \
       'Makefile-deps created on' `date` '1>&2)' \
    >> Makefile-deps; \
  ls -l Makefile-deps)
#$(info $(REBUILD_MAKEFILE_DEPS))
$(info Done scanning.)

endif # ifndef NO_RESCAN

include Makefile-deps

$(info Determining ACL2 features (for ACL2 = $(ACL2)))
ACL2_FEATURES := $(shell \
  rm -f Makefile-features ; \
  ACL2_CUSTOMIZATION=NONE $(STARTJOB) -c \
     "$(ACL2) < cert_features.lsp &> Makefile-features.out" ;\
  ls -l Makefile-features)

# Only conditionally include Makefile-features, so that make clean works even
# if ACL2 isn't built.
-include Makefile-features
$(info ACL2_HAS_HONS     := $(ACL2_HAS_HONS))
$(info ACL2_HAS_PARALLEL := $(ACL2_HAS_PARALLEL))
$(info ACL2_HAS_REALS    := $(ACL2_HAS_REALS))
$(info ACL2_COMP_EXT     := $(ACL2_COMP_EXT))
$(info Done with features.)

OK_CERTS := $(CERT_PL_CERTS)

ifeq ($(ACL2_HAS_HONS), )

# $(info Excluding books that depend on ACL2(h))
OK_CERTS := $(filter-out $(CERT_PL_HONS_ONLY), $(OK_CERTS))

else

ifdef ACL2_COMP
# We skip multi-lisp compilation for the centaur books, because these
# may be more likely to have code conditional on the combination of
# both features :CCL and :HONS.  That can affect checksums, thus
# making it appear that a book certified in CCL is not certified in
# another Lisp.  We also skip multi-lisp compilation for books that
# depend on centaur/ books when we see a multi-lisp compilation
# failure for books in their directories.  (Thus, even though
# security/des/ depends on GL and hence centaur/, we don't exclude
# its books.)
$(info For building compiled (.$(ACL2_COMP_EXT)) files, excluding centaur books)
OK_CERTS := $(filter-out centaur/%, \
              $(filter-out models/y86/%, \
                $(OK_CERTS)))

endif # ifdef ACL2_COMP
endif # ifeq ($(ACL2_HAS_HONS), ) ... else ...

# SLOW_BOOKS are books that are too slow to include as part of an ordinary
# regression.

SLOW_BOOKS := \
  workshops/2011/krug-et-al/support/MinVisor/va-to-pa-thm.cert \
  workshops/2011/krug-et-al/support/MinVisor/setup-nested-page-tables.cert

OK_CERTS := $(filter-out $(SLOW_BOOKS), $(OK_CERTS))

ifdef ACL2_COMP

ifndef NO_RESCAN

$(info Scanning for "make comp" dependencies...)
# Below, we use a different --var-prefix from the default used for the
# cert.pl call above, since we don't want to redefine the CERT_PL_xxx
# variables.  But note that we don't use the ACL2_COMP_xxx variables.
REBUILD_MAKEFILE_COMP := $(shell \
  rm -f Makefile-comp Makefile-comp.out; \
  time ((./cert.pl \
          --quiet \
          --static-makefile Makefile-comp-pre \
          --cache Makefile-cache \
          --acl2-books `pwd` \
          --targets Makefile-books \
          --no-boilerplate \
          --var-prefix ACL2_COMP) \
          1>&2) ;\
          (cat Makefile-comp-pre | sed "s/[.]cert/.$(ACL2_COMP_EXT)/g" > \
           Makefile-comp) 1>&2 ;\
  echo 'MFDEPS_DEBUG := $$(shell echo Reading book comp ' \
       'Makefile-comp created on' `date` '1>&2)' \
    >> Makefile-comp; \
  ls -l Makefile-comp)
$(info Done scanning.)

endif # ifndef NO_RESCAN

# Define books to be skipped for multi-lisp compilation.

OK_CERTS   := $(patsubst %.cert, %.$(ACL2_COMP_EXT), $(OK_CERTS))

# Start a sequence of assignments to BOOKS_SKIP_COMP:
BOOKS_SKIP_COMP :=

# Unusual directory:
BOOKS_SKIP_COMP += $(patsubst %.cert, %.$(ACL2_COMP_EXT), $(wildcard fix-cert/*.cert))

# Contains Lisp-specific readtime conditionals:
BOOKS_SKIP_COMP += hacking/evalable-ld-printing.$(ACL2_COMP_EXT)

# dft-ex.acl2 specifies no compilation; getprop.lisp can give stack
# overflow in during the load of the expansion file -- perhaps not
# surprising, given that (comp t) occurs in the .lisp file:
BOOKS_SKIP_COMP += misc/dft-ex.$(ACL2_COMP_EXT) misc/getprop.$(ACL2_COMP_EXT)

# aof.acl2 specifies no compilation; knuth-arch.lisp depends on aof:
BOOKS_SKIP_COMP += workshops/1999/knuth-91/aof.$(ACL2_COMP_EXT) \
                   workshops/1999/knuth-91/knuth-arch.$(ACL2_COMP_EXT)

# The .acl2 files specify no compilation:
BOOKS_SKIP_COMP += $(patsubst %.cert, %.$(ACL2_COMP_EXT), $(wildcard workshops/2002/cowles-flat/support/*.cert))

# The .acl2 files specify no compilation:
BOOKS_SKIP_COMP += $(patsubst %.cert, %.$(ACL2_COMP_EXT), $(wildcard workshops/2006/cowles-gamboa-euclid/Euclid/fld-u-poly/*.cert))

# Some .acl2 files specify no compilation, including ed3.acl2, and
# many books depend on ed3:
BOOKS_SKIP_COMP += $(patsubst %.cert, %.$(ACL2_COMP_EXT), $(wildcard workshops/2006/cowles-gamboa-euclid/Euclid/*.cert))

# The .acl2 files specify no compilation:
BOOKS_SKIP_COMP += workshops/2006/kaufmann-moore/support/rhs1-iff.$(ACL2_COMP_EXT) \
		   workshops/2006/kaufmann-moore/support/rhs1.$(ACL2_COMP_EXT) \
		   workshops/2006/kaufmann-moore/support/rhs2.$(ACL2_COMP_EXT) \
		   workshops/2006/kaufmann-moore/support/warnings.$(ACL2_COMP_EXT)

# There seems to be a problem with files that use include-raw.  We
# skip those.
# Has (include-raw "timer.lsp"):
BOOKS_SKIP_COMP += memoize/top.$(ACL2_COMP_EXT)
BOOKS_SKIP_COMP += $(patsubst %-raw.lsp, %.$(ACL2_COMP_EXT), $(shell find . -name '*-raw.lsp' -print))

# Has readtime conditionals #+ccl and #-ccl ("not supported for this
# host Lisp").
BOOKS_SKIP_COMP += centaur/bridge/top.$(ACL2_COMP_EXT)

# CLISP says: "Lisp stack overflow":
BOOKS_SKIP_COMP += workshops/2006/rager/support/ptest-mergesort.$(ACL2_COMP_EXT)

# In Makefile-comp, bdd/benchmarks.$(ACL2_COMP_EXT) may depend on
# bdd/benchmarks.lisp, but we don't want to make either, so we do this
# explicitly:
BOOKS_SKIP_COMP += bdd/benchmarks.$(ACL2_COMP_EXT)

OK_CERTS   := $(filter-out $(BOOKS_SKIP_COMP), $(OK_CERTS))

# Avoid trying to make compiled files; target %.$(ACL2_COMP_EXT) still
# "executes", but only once, and doesn't cause other compiled files to
# be out of date.
.INTERMEDIATE: $(BOOKS_SKIP_COMP)

include Makefile-comp

endif # ifdef ACL2_COMP

lite: $(OK_CERTS)

everything : all $(SLOW_BOOKS)


# The critical path report will work only if you have set up certificate timing
# BEFORE you build the books.  See ./critpath.pl --help for details.

# BOZO I probably broke this, we shouldn't use --targets, we should use ok_certs...
critpath.txt : $(OK_CERTS)
	echo "Building critpath.txt..."
	time ./critpath.pl -m 2 --targets Makefile-books > critpath.txt


# The following are handy targets for building subsets of the books,
# and they show how others are easy to add.  It's OK for the community
# to make updates to this set of targets through addition, deletion,
# or modification.  (But it's probably best to leave the "all", "lite"
# and "everything" targets unchanged unless there is a strong reason
# to change those.)

.PHONY: basic centaur coi workshops \
        workshop1999 workshop2000 workshop2001 workshop2002 \
        workshop2003 workshop2004 workshop2006 workshop2007 \
        workshop2009 workshop2011

basic : $(filter-out centaur/%, \
           $(filter-out coi/%, \
              $(filter-out workshops/%, $(OK_CERTS))))

centaur : $(filter centaur/%, $(OK_CERTS))

coi     : $(filter coi/%, $(OK_CERTS))

workshops : $(filter workshops/%, $(OK_CERTS))
workshop1999 : $(filter workshops/1999/%, $(OK_CERTS))
workshop2000 : $(filter workshops/2000/%, $(OK_CERTS))
workshop2001 : $(filter workshops/2001/%, $(OK_CERTS))
workshop2002 : $(filter workshops/2002/%, $(OK_CERTS))
workshop2003 : $(filter workshops/2003/%, $(OK_CERTS))
workshop2004 : $(filter workshops/2004/%, $(OK_CERTS))
workshop2006 : $(filter workshops/2006/%, $(OK_CERTS))
workshop2007 : $(filter workshops/2007/%, $(OK_CERTS))
workshop2009 : $(filter workshops/2009/%, $(OK_CERTS))
workshop2011 : $(filter workshops/2011/%, $(OK_CERTS))

# The `user' target allows one to specify the roots of the forest of
# books to be certified.
# Example (just remove "# " at the beginning of each line):
# make -f Makefile-jared -k -j 4 NO_RESCAN=1 ACL2=acl2h \
# ACL2_BOOK_CERTS=" \
# workshops/2006/cowles-gamboa-euclid/Euclid/ed6a.cert \
# workshops/2006/cowles-gamboa-euclid/Euclid/ed4bb.cert \
# " user
user : $(ACL2_BOOK_CERTS)


# CLEANING -------------------------------------------------------------------

# We delegate most of the cleaning process to clean.pl, a simple perl script
# that lets us take care not to delete certain kinds of files.  The clean.pl
# script will remove things like .cert and .fasl files.

CLEAN_FILES_EXPLICIT := \
   xdoc-impl/bookdoc.dat \
   Makefile-comp \
   Makefile-comp-pre \
   Makefile-deps \
   Makefile-books \
   Makefile-features \
   Makefile-cache \
   serialize/test.sao

MORECLEAN_FILES_EXPLICIT := \
   xdoc-impl/manual \
   centaur/manual

.PHONY: clean_books clean

clean_books:
	@echo "Using clean.pl to remove certificates, etc."
	./clean.pl

# We test that directory centaur/quicklisp exists because it probably
# doesn't for nonstd/, and we include this makefile from that
# directory.
clean: clean_books
	@echo "Removing extra, explicitly temporary files."
	rm -rf $(CLEAN_FILES_EXPLICIT)
	if [ -d centaur/quicklisp ] ; then \
	cd centaur/quicklisp; $(MAKE) clean ; \
	fi

moreclean: clean
	@echo "Removing even more generated files (documentation, etc)."
	rm -rf $(MORECLEAN_FILES_EXPLICIT)



.PHONY: dummy
dummy:

# Next, we deal with books that need special handling.

# Workshops/1999/multiplier is tricky because there are generated .lisp files
# involved.  Cert.pl can't scan these, so we have to add them manually.
# We'll just skip these for ACL2_COMP.

workshops/1999/multiplier/fmul.cert: \
  workshops/1999/multiplier/fmul.lisp \
  workshops/1999/multiplier/rtl.cert

workshops/1999/multiplier/fmul.lisp: \
  workshops/1999/multiplier/compiler.cert \
  workshops/1999/multiplier/fmul.trans
	@echo "Making workshops/1999/multiplier/fmul.lisp"
	@cd workshops/1999/multiplier; \
              $(STARTJOB) -c "$(ACL2) < make-fmul.lsp &> fmul.lisp.log"
	@ls -l workshops/1999/multiplier/fmul.lisp \
               workshops/1999/multiplier/fmul-star.lisp

workshops/1999/multiplier/fmul-star.lisp: \
  workshops/1999/multiplier/fmul.lisp

workshops/1999/multiplier/fmul-star.cert: \
  workshops/1999/multiplier/spec.cert

workshops/1999/multiplier/spec.cert: \
  workshops/1999/multiplier/fmul.cert

workshops/1999/multiplier/proof.cert: \
  workshops/1999/multiplier/fmul-star.cert


# xdoc-impl is tricky because we have to generate bookdoc.dat.

xdoc-impl/bookdoc.dat: \
  xdoc-impl/acl2-customization.lsp \
  xdoc-impl/bookdoc.lsp \
  xdoc/package.lsp \
  $(wildcard xdoc/*.lisp) \
  $(wildcard xdoc-impl/*.lisp) \
  xdoc-impl/extra-packages.cert
	@echo "Making xdoc-impl/bookdoc.dat"
	@cd xdoc-impl; \
          $(STARTJOB) -c "$(ACL2) < bookdoc.lsp &> bookdoc.out"
	@ls -l xdoc-impl/bookdoc.dat

# We assume that ACL2_HAS_REALS indicates a regression being done in
# nonstd/.
ifndef ACL2_HAS_REALS

# The following dependency is to be ignored in ACL2(r), where the
# relevant include-book in arithmetic-3/extra/ext.lisp is guarded by
# #-:non-standard-analysis.
arithmetic-3/extra/ext.cert: rtl/rel8/arithmetic/top.cert

endif # ifndef ACL2_HAS_REALS

# BOZO.   make-event/local-elided stuff is tricky because it thinks it can tell whether
# local-elided.lisp was provisionally certified or not, which doesn't
# necessarily make any sense... this is the easiest way to fix it so that it
# works with provisional certification:

make-event/local-elided-include.pcert1: make-event/local-elided.cert

make-event/macros-include.pcert1: make-event/macros.cert

make-event/local-requires-skip-check-include.pcert1: \
  make-event/local-requires-skip-check.cert

# Deal with generated file bdd/benchmarks.lisp (but no need to bother
# compiling it for different lisps):

ifndef ACL2_COMP

all: bdd/benchmarks.cert

endif # ifndef ACL2_COMP

bdd/benchmarks.cert: bdd/benchmarks.lisp

bdd/benchmarks.lisp: bdd/cbf.cert bdd/create-benchmarks.lsp
	cd bdd ; (echo '(ld "create-benchmarks.lsp")' | $(ACL2))

# We next handle the two directories that test provisional
# certification.  One is system/pcert, which was constructed
# explicitly to test provisional certification.  The other is
# workshops/2011/verbeek-schmaltz, which is slow without provisional
# certification but is reasonably fast using provisional
# certification.  For now, as a gross hack, use the old ACL2
# Makefile-generic system to do provisional certification, for example
# as follows for verbeek-schmaltz.

#   - we tell cert.pl not to look at verbeek-schmaltz/sources, via a
#     cert_pl_exclude file
#   - we add a verbeek-schmaltz/deps.lisp file with the prerequisites that
#     we need before going into the verbeek-schmaltz directory
#   - we use the following top-level target to certify the actual verbeek-schmaltz
#     books after certifying the deps

# We handle the verbeek-schmaltz directory first, but we skip it when
# ACL2_HAS_REALS indicates a regression being done by ACL2(r) in
# nonstd/.

ifndef ACL2_HAS_REALS

ifdef ACL2_COMP

# Keep the following code in sync with that for
# system/pcert/all.$(ACL2_COMP_EXT)
# below.  We use -j 1 because the old Makefile-generic doesn't
# establish dependencies between the compiled files, which can cause
# an error when attempting to load another book's partially-built
# compiled file.
workshops/2011/verbeek-schmaltz/sources/correctness2.$(ACL2_COMP_EXT) : \
  workshops/2011/verbeek-schmaltz/deps.$(ACL2_COMP_EXT)
	@echo "Making $@"
	@cd workshops/2011/verbeek-schmaltz/sources; \
	$(MAKE) -j 1 $(ACL2_COMP_EXT) ACL2_PCERT= >& make-$(ACL2_COMP_EXT).out ; \
	(cd ../../../.. ; ls -al $(@D)/*.$(ACL2_COMP_EXT)) ; \
	if [ `ls -1 *.$(ACL2_COMP_EXT) | wc -l` != `ls -1 *.cert | wc -l` ] ; then \
	echo "**COMPILATION FAILED** for $(@D);" ; \
	echo "  search for '**' in `pwd`/make-$(ACL2_COMP_EXT).out to see failures." ; \
	exit 1 ; \
	fi

all: workshops/2011/verbeek-schmaltz/sources/correctness2.$(ACL2_COMP_EXT)

else # normal case, where ACL2_COMP is not defined

workshops/2011/verbeek-schmaltz/sources/correctness2.cert : \
  workshops/2011/verbeek-schmaltz/deps.cert
	cd workshops/2011/verbeek-schmaltz/sources; $(MAKE) ACL2_PCERT=t

all: workshops/2011/verbeek-schmaltz/sources/correctness2.cert

endif # ifdef ACL2_COMP ... else ...

endif # ifndef ACL2_HAS_REALS

# We also want to test provisional certification using system/pcert/,
# so we use the same sort of trickery as we do just above
# workshops/2011/verbeek-schmaltz/sources (but this time, also
# suitable when ACL2_HAS_REALS is true).  We created
# system/pcert/all.lisp so that there would be a single top-level
# file; other approaches didn't work out.

ifdef ACL2_COMP

# Keep the following code in sync with that for
# workshops/2011/verbeek-schmaltz/sources/correctness2.$(ACL2_COMP_EXT)
# above.  We use -j 1 because the old Makefile-generic doesn't
# establish dependencies between the compiled files, which can cause
# an error when attempting to load another book's partially-built
# compiled file.
system/pcert/all.$(ACL2_COMP_EXT) : \
  system/pcert-deps.$(ACL2_COMP_EXT)
	@echo "Making $@"
	@cd system/pcert/ ; \
	$(MAKE) -j 1 $(ACL2_COMP_EXT) ACL2_PCERT= >& make-$(ACL2_COMP_EXT).out ; \
	(cd ../.. ; ls -al $(@D)/*.$(ACL2_COMP_EXT)) ; \
	if [ `ls -1 *.$(ACL2_COMP_EXT) | wc -l` != `ls -1 *.cert | wc -l` ] ; then \
	echo "**COMPILATION FAILED** for $(@D);" ; \
	echo "  search for '**' in `pwd`/make-$(ACL2_COMP_EXT).out to see failures." ; \
	exit 1 ; \
	fi

all: system/pcert/all.$(ACL2_COMP_EXT)

else # normal case, where ACL2_COMP is not defined

system/pcert/all.cert : \
  system/pcert-deps.cert
	cd system/pcert/; $(MAKE) ACL2_PCERT=t

all: system/pcert/all.cert

endif # ifdef ACL2_COMP ... else ...


# Multi-lisp compilation stuff for developers.

# NOTE: This build might fail for compiled files that involve
# include-raw, that have readtime conditionals, that can cause stack
# overflows when loading uncompiled code, etc.  We don't consider it
# critical, however, that every compiled file get built.  See "Define
# books to be skipped for multi-lisp compilation", above, for the
# compiled files we do not attempt to build.

# Typical making of compiled files in books/ could be done as follows.
# First, in ACL2 sources directory:
#   make -j 4 -k regression-fresh-jared ACL2_SAVE_EXPANSION=t ACL2=acl2-ccl
# Then, in books/ directory (where ACL2_SAVE_EXPANSION=t is optional,
# but a good idea in case some .cert file is unexpectedly remade):
#   make -j 4 -k -f Makefile-jared ACL2_COMP=t ACL2_SAVE_EXPANSION=t ACL2=acl2-sbcl

# Typical making of compiled files in books/nonstd/ could be done as follows.
# First, in ACL2 sources directory:
#   make -j 4 -k regression-nonstd-fresh-jared ACL2_SAVE_EXPANSION=t ACL2=acl2r-ccl
# Then, in books/nonstd/ directory (where ACL2_SAVE_EXPANSION=t is optional,
# but a good idea in case some .cert file is unexpectedly remade):
#   make -j 4 -k -f Makefile-jared-nonstd ACL2_COMP=t ACL2_SAVE_EXPANSION=t ACL2=acl2r-sbcl

# Note: these targets won't work unless you've already done a build
# using a "compatible" ACL2 (both ACL2, both ACL2(hp), etc.) after
# first setting ACL2_SAVE_EXPANSION=t, and then you define ACL2_COMP
# (e.g., ACL2_COMP=1) with a subsequent call of make.

ifdef ACL2_COMP

# Note that because of the .INTERMEDIATE target above, then for the
# next targets, "Skipping" will only be printed for skipped targets
# that are dependencies of not-skipped targets.  Apologies for the
# very long line.  With it broken into lines using `\', a syntax error
# was reported on Linux using make version 3.80.  Sigh.
%.$(ACL2_COMP_EXT): %.cert
	@if [ "$(findstring $@, $(BOOKS_SKIP_COMP))" != "" ] ; then \
	echo "Skipping $$PWD/$@" ; \
	else \
	echo "Making $$PWD/$@" ; \
	(echo '(ld `((include-book "$(patsubst %.$(ACL2_COMP_EXT),%,$(@))" :load-compiled-file :comp :ttags :all))) (acl2::value :q) (acl2::exit-lisp)' | $(ACL2) >& $@.out) ; (ls -al $@ || (echo "**COMPILATION FAILED** for `pwd`/$@" ; exit 1)) ; fi

endif # ifdef ACL2_COMP

# We now provide a way (adapted from the old Makefile-generic) for
# developers to be able to check well-formedness of the ACL2 world
# after including each book.  Note that the two problematic
# directories for world-checking, hacking/ and
# workshops/2007/dillinger-et-al/code/ override the
# chk-include-book-worlds target by setting environment variable
# ACL2_SKIP_CHK_INCLUDE_BOOK_WORLDS in order to skip this check.  The
# problem seems likely to be that in many of the books in these two
# directories, the first bad triple is a GLOBAL-VALUE for either the
# unknown property EXTEND-PROGN! or RETRACT-PROGN!, or else is an
# unbinding of the PREDEFINED property for PROGN! (indicating a use of
# :REDEF); presumably these books mess with raw mode.

BOOKS_BKCHK_OUT := $(patsubst %.cert,%.bkchk.out,$(OK_CERTS))
BOOKS_BKCHK_OUT := $(filter-out hacking/%, $(BOOKS_BKCHK_OUT))
BOOKS_BKCHK_OUT := $(filter-out workshops/2007/dillinger-et-al/code/%, $(BOOKS_BKCHK_OUT))

.PHONY: chk-include-book-worlds
chk-include-book-worlds: $(BOOKS_BKCHK_OUT)

%.bkchk.out: %.cert
	@echo "Including `pwd`/$* on `date`"
	@echo '(acl2::value :q)' > workxxx.bkchk.$(*F)
	@echo '(in-package "ACL2")' >> workxxx.bkchk.$(*F)
	@echo '(acl2::lp)' >> workxxx.bkchk.$(*F)
	@echo '(acl2::in-package "ACL2")' >> workxxx.bkchk.$(*F)
	@echo '(include-book "$*")' >> workxxx.bkchk.$(*F)
	@echo '(include-book "system/pseudo-good-worldp" :dir :system)' >> workxxx.bkchk.$(*F)
	@echo "Checking world created by including `pwd`/$* on `date`"
	@echo '(chk-pseudo-good-worldp "$*")' >> workxxx.bkchk.$(*F)
	@($(ACL2) < workxxx.bkchk.$(*F) 2>&1) > $*.bkchk.out
	@(fgrep 'Pseudo-good-worldp check for including "$*" passed.' $@) || \
            (echo '** Pseudo-good-worldp check FAILED for including $*;' "see `pwd`/$@" '**' ;\
             exit 1)
	@rm -f workxxx.bkchk.$(*F)
