This README file discusses the use of the ACL2s proof development
environment together with ACL2 books certified under the Rockwell ACL2
Make System (RAMS).

To avoid potential confusion in this text between the similar names
ACL2 and ACL2s we adopt a convention started by Winston Churchill to
prevent confusion in foreign relations between similarly spelled names
Ireland and Iceland.  In all documentation using the name Iceland,
that name was to be written Iceland (C).  Accordingly, we adopt the
convention that ACL2s be written ACL2s (S) in this documentation.

Contents are as follows:

    0.  Introduction
    1.  Setting up ACL2s (S)
    2.  Supplying our own build of ACL2
    3.  ACL2s (S) modes
    4.  Eclipse Projects and ACL2s (S)
        4.1.  Starting new projects
        4.2   Accessing existing directories

0. Introduction:

ACL2s (S) is a user-friendly environment built as a plug-in under the
Eclipse tool.  It provides enhanced editing capabilities for
constructing input to ACL2 and an environment for processing these
inputs with ACL2.  ACL2s (S), however, provides certain features
extending the system books of ACL2 which can interact in an
undesirable fashion with the Rockwell Collins proof books for
company-specific application.  As such, it is important that ACL2s (S)
be carefully applied to avoid incompatibility between the ACL2s (S)
environment and RAMS proof build system and unsoundness or errors
caused inconsistency between extensions to ACL2 logic by ACL2s (S) and
the Rockwell Collins proof libraries.

1.  Setting up ACL2s (S):

ACL2s (S) was written and is maintained outside the company by Peter
Dillinger, et al., and may be obtained through the software update
facility in the Eclipse tool.  Certain prerequsites are required of
the Eclipse tool and supporting environment.  In particular, a minimum
version of Eclipse and a Java runtime environment or development kit
is required.  See the ACL2s (S) documentation located at:

    http://acl2s.peterd.org/acl2s/doc/#reqs

The ACL2s (S) documentation also provides installation instructions:

    http://acl2s.peterd.org/acl2s/doc/#install

(To Do: add material describing certain pitfalls and remedies that we
have encountered.)

To access the ACL2s (S) functionality, the ACL2s (S) tool perspective
must be selected in Eclipse.  To do this, on the Eclipse main menu,
select "Window" then "Open Perspective" then "Other..."  Select "ACL2
Development" in the dialog box that appears and click "Ok."  If "ACL2
Development" is not one of the possible perspectives listed in the
"Open Perspective" dialog, ACL2s (S) or one of its dependencies is not
properly installed.  Refer to the ACL2s (S) installation instructions
for possible remedies.  The Eclipse main menu should now include the
top-level menu item "ACL2s."

2.  Supplying our own build of ACL2:

ACL2s (S) provides its own build of ACL2.  However, given that "bit
rot" eventually occurs, it is important that when using ACL2s (S), to
apply the same version of ACL2 as was used for certifying the Rockwell
Collins proof libraries.  Fortunately, ACL2s (S) provides a convenient
means of specifying application of an alternate build of ACL2.

To specify use of an alternate ACL2 build, access the Eclipse
preferences dialog by selecting "Window" on the main menu and then
"Preferences..."  Expand the ACL2s (S) preferences by clicking on the
triagle next to the "ACL2s" in the left pane of the preferences
dialog.  Then click on the "ACL2" in the left pane of the preferences
dialog to select the page for configuration of the ACL2 build.

This page of the preferences dialog provides access a text box labeled
"ACL2 build path" used for indicating the ACL2 build to be used.  If
the box is blank, the default ACL2 build provided with ACL2s (S) is
used.  Enter the pathname of the directory containing the ACL2 build
to be used.  Presently, this is

    /rfs/proj/acs_dept/apps/acl2-3.3-gcl-2.6.7

but this will change over time as ACL2 is enhanced.  Note that only
the pathname is specified.  ACL2s (S) will automatically derive the
filename of the executable ACL2 image from the given pathname and
usual filenames for ACL2 images.  (e.g. saved_acl2, run_acl2.exe,
etc.)

3.  ACL2s (S) modes:

ACL2s (S) evaluates lisp files in one of four modes.  These modes are
described in some detail in the ACL2s (S) documentation:

    http://acl2s.peterd.org/acl2s/doc/#guide_modes

For development of new proof books, any of the ACL2s (S) modes may be
used, progressively working as the ACL2s (S) documentation describes
toward "Compatible" mode.  This allows the user to gradually build up
the contents of the proof book.  However, for compatibility with the
Rockwell Collins proof libraries, "Compatible" mode must be used.  In
this mode, the behavior of ACL2s (S) is as close as possible to that
of ACL2 proper.

The modes are selected by insertion of what ACL2s (S) calls a preamble
at the beginning of the .lisp file.  ACL2s (S) takes advantage of the
fact that what is presented in the editor is not necessarily the same
as what is saved in the .lisp file.  In this case, the preamble
appears as real code to ACL2s (S), but the preamble is saved as
comments at the front of the .lisp file and is accordingly ignored by
ACL2 proper.  This is a useful behavior as we discuss in the following
sections.

The ACL2s (S) preamble is roughly equivalent to the portcullis that
ACL2 users would place in an .ACL2 file.  Thus, it loads (includes)
particular proof books and generally sets up the context in which the
cooresponding .lisp file is to be evaluated.

4.  Eclipse projects and ACL2s (S)

4.1.  Starting new projects

(To Do: Discuss creation of a new project under Eclipse, creating
.lisp file and evaluation under ACL2s (S).  Discuss files generated by
ACL2 and ACL2s (S) and what should be added to the CM system.  Also
discuss creation of RAMS-compatible make files.)

From the Eclipse "File" menu, select "New..." and then select
"Project..."  Then in the new project wizard select "General,"
clicking on the triangle to expand the "General" sublist and select
"Project."  Click the "Next" button to advance to the next page of the
new project wizard.  Type in a project name in the "Project Name" text
box.  Typically, you will want to place the project somewhere other
than in the default location.  If so, uncheck the "Use Default
Location" checkbox and type the desired pathname into the "Location"
text box or browse to the location using the "Browse" button.  Click
the "Finish" button to create the new project.

New .lisp files within the project may be created by using the "File"
menu in Eclipse.  ...

4.2.  Accessing existing directories

If working with an existing proof directory under ACL2s (S) is
desired, the following procedure for creating an Eclipse project
should be followed.  From the Eclipse "File" menu, select "New..." and
then select "Project..."  Then in the new project wizard select
"General," clicking on the triangle to expand the "General" sublist
and select "Project."  Click the "Next" button to advance to the next
page of the new project wizard.  Type in a project name in the
"Project Name" text box.  Uncheck the "Use Default Location" checkbox
and type the location of the existing directory into the "Location"
text box or browse to the location using the "Browse" button.  Click
the "Finish" button to create the new project.  Eclipse will generate
meta data for its purposes and incorporate the files found in the
selected location into the project.

If the directory is managed under the RAMS, care must be taken to
preserve the funcationality of RAMS while accessing the features of
ACL2s (S).  First, RAMS must have been run to construct necessary
generated files including Makefile.acl2 and possibly cert.acl2.  These
files contain necessary path information and associated context for
inclusion of pre-certified books from the Rockwell Collins proof
libraries.  These files can be built by RAMS without attempting to
complete proofs by making only the dependencies using the command:

    make deps

Next the various lisp files must be considered as to how they are to
be handled under ACL2s (S).  For each .lisp file, check to see if a
corresponding .acl2 file exists.  If the .lisp file has a
corresponding .acl2 file, ACL2s (S) respects this .acl2 file and will
use it when evaluating the contents of the .lisp file.  No further
action is necessary.  ACL2s (S) can then evaluate all of the events in
the .lisp file.  However, ACL2s (S) cannot complete certification of
the file as a book because no preamble exists at the beginning of that
file.  Certification of the file in this case may be completed under
RAMS.  Do not create a preamble in ACL2s (S) as this will cause ACL2s
(S) to silently overwrite the contents of the .acl2s file, breaking
the certification chain under RAMS.

If no .acl2 file exists corresponding to a .lisp file, a preamble
enabling ACL2s (S) to evaluate the .lisp file can manually be
inserted.  Place the following at the beginning of the file:

    (ld "cert.acl2")
    (acl2::begin-book)

Behind the scenes, ACL2s (S) will create the necessary portcullis and
save this into a corresponding .acl2 file.  Note that since this .acl2
file is generated by ACL2s (S), it should not be checked into
configuration management.  Further, this .acl2 file will interfere
with RAMS and it should be deleted prior to running RAMS.  Further,
note that as discussed under the modes section above, ACL2s (S)
actually saves the entered preamble as Lisp comments in the .lisp file
and as such it will be ignored by ACL2 proper under RAMS.
