# make/Makefile.top
#
# This is the top level Makefile that should be included in by individual
# project directory Makefiles.
#
# Author: Jared Davis
#
# Revised by Doug Harper

# NOTE: Change the settings in Makefile.config to match your system.
# (For example, your ACL2 executable, books directory, etc.)

include $(MAKEDIR)/Makefile.config

# If the string "$(MAKE)" appears on a command line it defeats the
# effects of the "-n", "-q" and "-t" options for the entire line: it
# has the same effect as starting the line with "+".  Everything on
# that line, including commands separated from the "$(MAKE)" by
# semicolons, will be run.
#
# This behavior is especially pernicious when the user doesn't want to
# affect anything and has therefore specified the "let's pretend" option
# "-n".
#
# To get around the above and still have all the other desired effects
# of "$(MAKE)", we use the following dodge:

SAFE_MAKE = $(MAKE)

# NON-CONFIGURATION ----------------------------------------------------------

# You probably shouldn't edit this unless you know what you are doing.  We set
# up our targets -- most of them just forward to the shell script
# Makefile.bash, which computes library paths, then dependencies, then finally
# invokes Makefile.aux to actually perform the build.  We use this elaborate
# system so that our users can just type "make" and not worry about how things
# work.

# Check to see if we have a system time program, otherwise use the shell's
# built-in time program.

TIME = $(shell if [ -e "/usr/bin/time" ] ;\
		then if [ -n "$(shell /usr/bin/time --version 2>&1 | grep GNU)" ] ;\
		     then echo "/usr/bin/time" ;\
		     else echo "time" ;\
		     fi ;\
		else \
		     echo "time" ;\
		fi)

# Add "time" in front of ACL2 as our ACL2 command (but not if ACL2 has
# already been doctored).

ifeq  "$(words $(ACL2))" "1"
ACL2_CMD = $(TIME) $(ACL2)
else
ACL2_CMD = $(ACL2)
endif

CORE_EXPORTS = \
	ACL2="$(ACL2_CMD)" \
	ACL2_SYSTEM_BOOKS="$(ACL2_SYSTEM_BOOKS)" \
	BOOKS="$(BOOKS)" \
	DEBUG="$(DEBUG)" \
        LIB_ROOT="$(LIB_ROOT)" \
	MAKEDIR="$(MAKEDIR)"

EXPORTS = \
	$(CORE_EXPORTS) \
	LDFILES="$(LDFILES)" \
	LIBS="$(LIBS)" \

EXPORT = export $(EXPORTS) ;

.PHONY: all clean deps status help fake debug breakfast

.SUFFIXES: .cert .lisp

.lisp.cert: debug
	@if [ -n "$(DEBUG)" ] ; \
	then \
	    echo "[Makefile.top]: .lisp.cert suffix triggered for '$@'" ; \
	fi
	@if [ Makefile.deps -nt $*.lisp ] ; \
	then \
	    if [ -n "$(DEBUG)" ] ; \
	    then \
		echo "[Makefile.top]: Invoking Makefile.aux for $@" ; \
	    fi ; \
	    $(SAFE_MAKE) -sf $(MAKEDIR)/Makefile.aux $@ $(CORE_EXPORTS) 2>&1 ; \
	else \
	    if [ -n "$(DEBUG)" ] ; \
	    then \
		echo "[Makefile.top]: Invoking Makefile.bash for $@" ; \
	    fi ; \
	    $(EXPORT) sh $(MAKEDIR)/Makefile.bash $@ ; \
	fi

all: debug
	@if [ -n "$(DEBUG)" ] ; \
	then \
		echo "[Makefile.top]: Invoking Makefile.bash for 'all'" ; \
	fi
	@$(EXPORT) export TIME="Total time: %e seconds"; \
		$(TIME) sh $(MAKEDIR)/Makefile.bash all 2>&1

# The following targets are handed off immediately to Makefile.aux without an
# intervening Makefile.bash step.

HANDOFFS = clean dfsl fas fasl o sparcf ufsl x86f

$(HANDOFFS): debug
	@if [ -n "$(DEBUG)" ] ; \
	then \
		echo "[Makefile.top]: Invoking Makefile.aux for $@" ; \
	fi
	@$(SAFE_MAKE) $(EXPORTS) -f $(MAKEDIR)/Makefile.aux $@ 2>&1

deps: debug
	@if [ -n "$(DEBUG)" ] ; \
	then \
		echo "[Makefile.top]: Invoking Makefile.bash for 'deps'" ;\
	fi
	@$(EXPORT) sh $(MAKEDIR)/Makefile.bash deps

ALLBOOKS = $(patsubst %.lisp, %, $(wildcard *.lisp))

alldeps: debug
	@if [ -n "$(DEBUG)" ] ; \
	then \
		echo "[Makefile.top]: Invoking Makefile.bash for 'deps'" ;\
	fi
	@$(EXPORT) export BOOKS="$(ALLBOOKS)" ; sh $(MAKEDIR)/Makefile.bash deps

status: debug
	@if [ -n "$(DEBUG)" ] ; \
	then \
		echo "[Makefile.top]: Invoking 'cvs status' directly" ;\
	fi
	@cvs status | grep File

breakfast: debug
	@if [ -n "$(DEBUG)" ] ; \
	then \
		echo "[Makefile.top]: Ordering breakfast" ;\
	fi
	@cat $(MAKEDIR)/BREAKFAST

help: debug
	@if [ -n "$(DEBUG)" ] ; \
	then \
		echo "[Makefile.top]: Displaying 'help' menu" ;\
	fi
	@cat $(MAKEDIR)/HELP

debug:
	@if [ -n "$(DEBUG)" ] ; \
	then \
		echo "[Makefile.top]: Debugging Mode is Enabled!" ; \
	fi

# We run into a slight problem, which is that when you just type "make
# foo.cert" after things have already been made, the suffix rule for this
# makefile may not even fire because it might decide that your cert file is up
# to date.  So, if there are deps/dirs files around, we try to include them if
# possible, knowing that they are "one build old", but not having any other way
# to force a reconsideration.

-include Makefile.dirs
-include Makefile.deps
