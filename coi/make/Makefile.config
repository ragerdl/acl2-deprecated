# -*-Makefile-*- make/Makefile.config
#
# Configuration file for the RAMS System.
#
# Author: Jared Davis
# Revised by Doug Harper

# CONFIGURATION --------------------------------------------------------------

# You may freely mix and match:
#
#   - which ACL2 image to use;
#
#   - which ACL2 system books to use;
#
#   - which user libraries to use;
#
#   - which version of vFaat to use (if desired); and
#
#   - whether or not to run in debug mode.

# -----------------------------------------------------------------------------
#
#			   WHICH ACL2 IMAGE?
#
# Controlled by $ACL2
#
# This can be overridden by the user typing ACL2=[...] along with their make,
# but by default we will always use whatever image is specified here:
#
# NOTE: Never put "time" in front of this command!  That's done automatically
# later.  This needs to be the physical path to the ACL2 executable.

ifeq ($(OSTYPE),msys)
  ACL2 ?= /c/rockwellcollins/localapps/rc_eclipse_330/plugins/acl2_image.win32.x86_3.3.0/run_acl2.exe
else
  ACL2 ?= /rfs/proj/acs_dept/apps/acl2-3.3-gcl-2.6.7/saved_acl2
endif

# -----------------------------------------------------------------------------
#
#			WHICH ACL2 SYSTEM BOOKS?
#
# Controlled by $ACL2_SYSTEM_BOOKS
#
# These are the books you get via
#
#   (include-book "foo" :dir :system)
#
# Normally there is no reason to override the setting below, because
# it's telling ACL2 to use the books that come with the ACL2 executable.
# For example, if
#
#   ACL2 = /some/path/saved_acl2
#
# then
#
#   ACL2_SYSTEM_BOOKS = /some/path/books
#
# But, if you want, you can specify a different set of system books to
# use.  For example, if your ACL2 image lives in /usr/bin or something,
# you might want to set up your ACL2_SYSTEM_BOOKS differently.  DO NOT
# USE A TRAILING SLASH.
#
# In addition to directly changing the setting here, both of these ways
# work:
#
#   setenv ACL2_SYSTEM_BOOKS /accts/USER/my-lib/books
#   make quux
#
#   make ACL2_SYSTEM_BOOKS=/accts/USER/my-lib/books quux

export ACL2_SYSTEM_BOOKS ?= $(addsuffix books, $(dir $(ACL2)))

# -----------------------------------------------------------------------------
#
#			 WHICH USER LIBRARIES?
#
# Controlled by $LIB_ROOT
#
# (See also ./DIRS)
#
# Normally, these are the libraries that are sister directories to this
# RAMS directory.  There is no need to give LIB_ROOT a value if these are the
# user libraries that you want.
#
# If you want to use different versions of the libraries, set LIB_ROOT
# to point to their common root.  DO NOT USE A TRAILING SLASH!
#
# In addition to directly changing the setting here, both of these ways
# work:
#
#   setenv LIB_ROOT /accts/USER/my-user-libs
#   make quux
#
#   make LIB_ROOT=/accts/USER/my-user-libs quux

LIB_ROOT ?= $(MAKEDIR)/..

# -----------------------------------------------------------------------------
#
#			    WHICH VERSION OF VFAAT?
#
#
# Controlled by VFAAT_ROOT
#
# Override it by editing this file, using "setenv", or by specifying it on the
# command line for "make" (listed in order of increasing precedence).

# A convenience variable for defining VFAAT_ROOT below; ignored when VFAAT_ROOT
# is already defined.

VFAAT_CLIENT = vfaatCLI-0.1.5

# VFAAT_ROOT has to be an environment variable in order for the vFaat
# executables to function correctly, hence the "export" prefix.

ifeq ($(OSTYPE),msys)
	export VFAAT_ROOT ?= /c/Progra~1/Eclipse/$(VFAAT_CLIENT)
else
ifeq ($(shell uname -o),Cygwin)
	export VFAAT_ROOT ?= /cygdrive/c/Progra~1/Eclipse/$(VFAAT_CLIENT)
else
	export VFAAT_ROOT ?= /rfs/proj/acs_dept/apps/$(VFAAT_CLIENT)
endif
endif

# The vFaat executables come from $VFAAT_ROOT.

VFAAT = $(VFAAT_ROOT)/vfaat

# Xalan must be compatible with the vFaat executables, so we doctor PATH and
# LD_LIBRARY_PATH just to be sure.  (Note that setting via ":=" rather than "="
# is necessary in order to beat Make's circularity tests.)  The "export" makes
# them environment variables for the vFaat executables.
#
# Do not override these settings.

export PATH            := $(PATH):/rfs/proj/acs_dept/apps/bin:$(VFAAT_ROOT)
export LD_LIBRARY_PATH := /rfs/proj/acs_dept/apps/lib:$(LD_LIBRARY_PATH)

# -----------------------------------------------------------------------------
#
#			      DEBUG MODE?
#
# Controlled by $DEBUG
#
# Print debugging information?  This can be overwhelming, so you are probably
# best to leave this line commented unless you are having problems with the
# build system.  Otherwise, set DEBUG to any non-empty string to enable
# debugging output.

# DEBUG = 1
