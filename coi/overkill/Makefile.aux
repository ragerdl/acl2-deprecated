# Makefile.aux
#
# This file is basically a heavily modified version of ACL2's Makefile-generic.
#
# Note: This file is a support system for RAMS, and is intended to be invoked 
# only from Makefile.top or Makefile.bash.
#
# Author: Jared Davis 


# Fix problem with sh on some Linux systems.  
# jcd - Which linux systems?  Ours don't seem to have this problem, but I guess
# I will leave this in.

ifeq ($(OSTYPE),linux)
	SHELL = bash
endif
ifeq ($(OSTYPE),linux-gnu)
	SHELL = bash
endif


# Inhibit all output except the summary (which can be useful for tracking down
# problems).  Set this to "" if you do want the output.

INHIBIT = (assign inhibit-output-lst (list (quote prove) (quote proof-tree) (quote warning) (quote observation) (quote event)))



# jcd - took out the pwds here

BOOKS_CERT  = $(patsubst %, %.cert, $(BOOKS))
BOOKS_PCERT = $(patsubst %, %.pcert, $(BOOKS))
BOOKS_O     = $(patsubst %, %.o, $(BOOKS))

.SUFFIXES: .pcert .cert .lisp .o



# BZO move this into a script.

#  This rule tells how to get <book>.cert from <book>.lisp, either by running
#  ACL2 on the <book>.acl2 file (if it exists) or using the default command
#  to certify at ground zero.  Note that some Lisps execute (LP) upon startup
#  and some do not, and some (e.g., OpenMCL) might not even start in the ACL2
#  package, which can cause a problem if .acl2 files in our regressions suite
#  execute (LP) instead of (ACL2::LP).  We deal with these issues below.

.lisp.cert:
	@echo "Making $*.cert at `date +%T`"
	@rm -f $*.cert
	@echo '(acl2::value :q)' > workxxx.$(*F)
	@echo '(in-package "ACL2")' >> workxxx.$(*F)
	@echo '(acl2::lp)' >> workxxx.$(*F)
	@echo '$(INHIBIT)' >> workxxx.$(*F)
	@if [ -f $*.acl2 ] ; \
	then \
	  cat $*.acl2 >> workxxx.$(*F) ; \
	elif [ -f cert.acl2 ] ; \
	then \
	  cat cert.acl2 >> workxxx.$(*F) ; \
	  echo "" >> workxxx.$(*F) ; \
	  echo '(certify-book "$*" ? $(ACL2_COMPILE_FLG))' >> workxxx.$(*F) ; \
	else \
	  echo "" >> workxxx.$(*F) ; \
	  echo '(certify-book! "$*" 0 $(ACL2_COMPILE_FLG))' >> workxxx.$(*F) ; \
	fi
	@echo '(acl2::value :q)' >> workxxx.$(*F)
	@echo '(acl2::exit-lisp)' >> workxxx.$(*F)
	@if [ -n "$(DEBUG)" ] ;\
	then \
	  echo "[Makefile-generic]: certify book commands:" ;\
	  echo "" ;\
	  cat workxxx.$(*F) ;\
	  echo "" ;\
	fi	
	@export TIME="%e seconds"; $(ACL2) < workxxx.$(*F) > $*.out
	@rm -f workxxx.$(*F)
	@((test \( -e $< \) -a \( ! \( $< -nt $@ \) \)) && (ls -al $*.cert)) || (echo "**CERTIFICATION FAILED**" ; exit 1)



# This rule tells us how to get <book>.pcert from <book>.lisp, by handing over
# control to our Makefile-pcert.bash script.

.lisp.pcert:
	@echo "$(HOSTNAME) Making $*.pcert at `date +%T`"
	@export ACL2="$(ACL2)" DEBUG="$(DEBUG)" \
		DIRECTORY="`pwd -P`" FILENAME="$*" ;\
		$(MAKEDIR)/Makefile-pcert.bash 

# BZO move this into a script.

# This rule tells us how to get <book>.o from <book>.lisp.

.lisp.o:
	@echo "Making $*.o at `date +%T`"
	@rm -f $*.o
	@echo '(acl2::value :q)' > workxxx.$(*F)
	@echo '(in-package "ACL2")' >> workxxx.$(*F)
	@if [ -f $*.acl2 ] ; \
	then \
	  cat $*.acl2 | grep -v "certify-book" >> workxxx.$(*F) ; \
	elif [ -f cert.acl2 ] ; \
	then \
	  cat cert.acl2 >> workxxx.$(*F) ; \
	  echo "" >> workxxx.$(*F) ; \
	else \
	  echo "" >> workxxx.$(*F) ; \
	fi
	@echo '(acl2::value :q)' >> workxxx.$(*F)
	@echo '(acl2-compile-file "$*.lisp" "$*.lisp")' >> workxxx.$(*F)
	@echo '(acl2::exit-lisp)' >> workxxx.$(*F)
	@export TIME="%e seconds"; $(ACL2) < workxxx.$(*F) > $*.oout
	@rm -f workxxx.$(*F)
	@((test \( -e $< \) -a \( ! \( $< -nt $@ \) \)) && (ls -al $*.o)) || (echo "**CERTIFICATION FAILED**" ; exit 1)




# This rule certifies every book in BOOKS.  If the dependencies are set up
# correctly -- and they certainly should be, since we have taken great pains to
# automatically compute them -- then the order of the books in BOOKS won't
# matter.

all:
	@if [ -n "$(DEBUG)" ] ;\
	then \
		echo "[Makefile-generic]: Going to make 'all'" ;\
	fi
	echo 'Using ACL2=$(ACL2)'
	$(MAKE) -s -f $(MAKEDIR)/Makefile.aux $(BOOKS_CERT) \
		INHIBIT='$(INHIBIT)' ACL2='$(ACL2)'



# This rule is like "make all", but it makes pcerts instead of certs.

pcert:
	@if [ -n "$(DEBUG)" ] ;\
	then \
		echo "[Makefile.aux]: Going to make 'pcert'" ;\
	fi
	echo 'Using ACL2=$(ACL2)'
	$(MAKE) -s -f $(MAKEDIR)/Makefile.aux $(BOOKS_PCERT) ACL2='$(ACL2)'


# This rule is like "make all", but it makes .o files instead of certs.

compile:
	@if [ -n "$(DEBUG)" ] ;\
	then \
		echo "[Makefile.aux]: Going to make 'compile'" ;\
	fi
	echo 'Using ACL2=$(ACL2)'
	$(MAKE) -s -f $(MAKEDIR)/Makefile.aux $(BOOKS_O) ACL2='$(ACL2)'


# This rule removes all the temporary files.  In makefile-generic, each element
# was listed on its own line.  I have condensed them into a single, huge rm
# command since this seems more efficient, particularly on Windows systems
# where launching executables seems to take more time.  How many of these are
# actually relevant today?

# This weird indenting is looks nice when it executes.

clean:
	rm -f *.cert *.o *.h *.c *.lib *.fasl *.fas *.sbin *.lbin *.pfsl \
      *.cfsl *.bin *.sparcf *.ufsl *.dfsl *.x86f *.axpf *.out *.date \
      *.log TMP.* TMP1.* workxxx* *.oout *.pwork *.pout *.plisp *.pcert \
      *.pcompat.lisp gazonk* Makefile.acl2 Makefile.dirs Makefile.deps \
      Makefile.ldeps
	rm -rf .okill



# Next we need to set up our directory paths.  We first need to always set
# up the path to the ACL2 system books, and then we will want to load our
# Makefile.dirs file.   These must be done before Makefile.deps is loaded,
# because Makefile.deps depends on these paths.

ACL2_SYSTEM_BOOKS = $(ACL2_ROOT)/books

include Makefile.dirs

# We also load the Makefile.deps file which is our primary source of book 
# dependency information.

include Makefile.deps

# Finally, we load the Makefile.ldeps file, which provides localized links to
# the dependency information in Makefile.deps, so that typing, e.g., "make
# foo.cert" is understood to be the same thing as typing "make
# /path/to/foo.cert".

include Makefile.ldeps


