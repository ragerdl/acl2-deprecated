# make/Makefile.top
#
# This is the top level Makefile that should be included in by individual
# project directory Makefiles.
#
# Author: Jared Davis 


# CONFIGURATION --------------------------------------------------------------

# WHICH ACL2 IMAGE?
#
# This can be overridden by the user typing ACL2=[...] along with their make,
# but by default we will always use whatever image is specified here.  NOTE:
# Never put "time" in front of this command!  That's done automatically later.
# This needs to be the physical path to the ACL2 executable.

ifndef ACL2
    ACL2 = /rfs/proj/acs_dept/apps/acl2-2.9.2-gcl-2.6.5-RH/saved_acl2
endif




# WHICH ACL2 BOOKS?
#
# Normally there is no reason to specify a value here, because we will just
# strip off the final saved_acl2 from $(ACL2) and add "books".  But, if you
# want, you can specify a different set of system books to use.  For example,
# if your ACL2 image lives in /usr/bin or something, you might want to set up
# your ACL2_BOOKS differently.  DO NOT USE A TRAILING SLASH.

# ACL2_BOOKS = /rfs/proj/acs_dept/apps/acl2-2.9.2-gcl-2.6.5-RH/books




# DEBUG MODE?
#
# Print debugging information? This can be overwhelming, so you are probably
# best to leave this line commented unless you are having problems with the
# build system. Otherwise, set DEBUG to any non-empty string, e.g., "1", to
# enable debugging output.

# DEBUG = 1




# SKIP DEPENDENCY COMPUTATION?
#
# You can skip the dependency computation if you don't want to wait for it.
# This is NOT recommended, because it really doesn't take that long and it
# is important that all of our dependencies are always up to date.  But, this
# is a useful flag that we can use when we are doing parallel pcert builds.
# Then, we just want to compute the dependencies once, and then trust that 
# they are valid from then on.
#
# This is just like DEBUG, in that any non-empty string is interpreted as true
# and the empty string is interpreted as false.  Hence, leave this commented
# out unless you want to always skip dependency computations.

# SKIPDEPS = 1






# IMPLEMENTATION -------------------------------------------------------------

# Edit to your peril!

# The RAMS system is somewhat complicated, but the one paragraph overview of
# how it works is the folloiwng: the targets in this Makefile.top file are
# typically forwarded to the Makefile.bash script, which is responsible for
# setting up the build environment (computing all of the dependencies that our
# books have on one another, setting up files for add-include-book-dir
# commands, and so forth.)  When the Makefile.bash script is done, it calls
# make on the file Makefile.aux, which actually does the real work of building
# certificates and so forth.

# In exchange for this convoluted way of doing things, we get two nice
# benefits.  First, our user interface is in terms of the familiar "make"
# command.  Second, we get the "power" of shell scripts insofar as that we are
# able to execute arbitrary commands at the start of each (almost) build.

# This hybrid system is not perfect, but it has few major deficiencies other
# than its sheer complication.  At the end of this file, you'll see the one
# "real" problem that we can't quite get around.





# We prefer to use GNU time because we can control its output format.  If not,
# we will settle for the shell's ugly built-in time command.

TIME = $(shell if [ -e "/usr/bin/time" ] ;\
		then if [ -n "$(shell /usr/bin/time --version 2>&1 | grep GNU)" ] ;\
		     then echo "/usr/bin/time" ;\
                     else echo "time" ;\
                     fi ;\
                else \
                     echo "time" ;\
		fi)

ACL2_CMD = $(TIME) $(ACL2)



# We now decide which ACL2 root to use.  If ACL2_BOOKS is provided, we strip
# off the final directory from it in order to get to the ACL2 root.  Otherwise,
# we strip off the final part of the path to the ACL2 executable, so as long as
# the ACL2 executable lives in the ACL2 distribution (e.g., not in /usr/bin or
# somethin), you never have to provide ACL2_BOOKS.

ifndef ACL2_BOOKS
	ACL2_ROOT = $(shell echo $(ACL2) | sed "s/\/[^/]*$$//")
else
	ACL2_ROOT = $(shell echo $(ACL2_BOOKS) | sed "s/\/[^/]*$$//")
endif



# It is necessary to pass many variables to the Makefile.bash script when we
# need to invoke it.  We set up this list of all the variables we would like to
# export.

EXPORT = export BOOKS="$(BOOKS)" \
         MAKEDIR="$(MAKEDIR)" \
         ACL2="$(ACL2_CMD)" \
         ACL2_ROOT="$(ACL2_ROOT)" \
	 DEBUG="$(DEBUG)" \
         LIBS="$(LIBS)" \
	 NORECUR="$(NORECUR)" \
	 QUIET="$(QUIET)" \
	 SKIPDEPS="$(SKIPDEPS)" \
         NAME="$(NAME)" ;



# We have a whole lot of targets.  Most of them are fake, i.e., they do not
# correspond to any files.  We list these fake targets in the .PHONY list so
# that, on the off chance there is a file named "all" or something, Make does
# not incorrectly think that "make all" is up to date.

.PHONY: all pcert compile clean deps just-libs \
        status help fake debug breakfast lsbooks



# We have suffix rules that know how to build .cert files, .pcert files, and .o
# files from .lisp files.

.SUFFIXES: .cert .pcert .o .lisp



# Here is how we build a .cert files from a .lisp files: We just invoke
# Makefile.bash script and tell it what file we would like to have certified,
# and all of the real work is done in Makefile.aux later.

.lisp.cert: debug
	@$(EXPORT) sh $(MAKEDIR)/Makefile.bash $@



# The suffix rule for building .pcert files from .lisp files is very similar.
# We invoke Makefile.bash and tell it what we want to have built, and it calls
# Makefile.aux to build it eventually.  

.lisp.pcert: debug
	@$(EXPORT) sh $(MAKEDIR)/Makefile.bash $@



# The suffix rule for building .o files from .lisp files should be just the
# same.  But, right now it is broken, so we print a warning message if you try
# to use this.  Also, do we really want to invoke Makefile.bash here?

.lisp.o: debug
	@echo "WARNING: making .o files is currently only half working!"
	@echo "You are not advised to use this feature!"
	@$(EXPORT) sh $(MAKEDIR)/Makefile.bash $@




# The "make all" target is the default target, and tries to certify all of the
# books listed in BOOKS.  This is the main target that everyone uses most of
# the time.  But, it can be slow to actually certify books, so you might want
# to consider .pcert files instead.

all: debug
	@$(EXPORT) export TIME="Total time: %e seconds"; \
		$(TIME) sh $(MAKEDIR)/Makefile.bash all 2>&1 



# The "make pcert" target tries to build .pcert files for every book in BOOKS.
# You probably should use the Overkill system instead, so that your build can
# be in parallel on many machines.  But, even so, "make pcert" can be useful if
# you just don't want to wait for some other library to build.

pcert: debug
	@$(EXPORT) export TIME="Total time: %e seconds"; \
		$(TIME) sh $(MAKEDIR)/Makefile.bash pcert 2>&1 



# The "make compile" target should, someday, create .o files for all of the
# lisp files in BOOKS.  Right now it is only half working, so we print out a
# warning message if you ever try to use this.

compile: debug
	@echo "WARNING: making .o files is currently only half working!"
	@echo "You are not advised to use this feature!"
	@$(EXPORT) export TIME="Total time: %e seconds"; \
		$(TIME) sh $(MAKEDIR)/Makefile.bash compile 2>&1 



# The "make overkill" target tries to invoke the Overkill system to build all
# .pcert files in this directory.  This is a powerful command that will harness
# the power of many machines.  

# As a prerequisite, overkill always invokes "deps" first make sure that all
# dependencies are up to date.  It should also eventually require "compile" to
# make sure that all files start off compiled.

overkill:
	@make -s deps
	@$(EXPORT) export TIME="Total time: %e seconds"; \
		$(TIME) sh "$(MAKEDIR)/Makefile-overkill.bash"

overkill-prep:
	@$(EXPORT) export TIME="%e seconds" ;\
		sh "$(MAKEDIR)/Makefile-okillprep.bash"


# The "make lsbooks" target requests a list of books that should be built by
# this Makefile.  It returns the books with their full paths, and is used by
# the global (i.e., make directory) Overkill system to figure out what jobs to
# farm out to each host.

lsbooks: debug
	@for book in $(BOOKS) ;\
        do \
		echo "`pwd -P`/$$book" ;\
	done


# The "make clean" target eliminates all of the generated files from your
# project.  This includes all .cert, .pcert, and .o files, as well as the
# temporary "work" files and so forth.

# Note: the touch commands here are necessary so that issuing a "make clean" in
# an already-clean directory does not result in errors.  Makefile.aux tries to
# inclue all three of these files, and if any one of them does not exist, an
# error will be reported.

clean: debug
	@touch Makefile.dirs
	@touch Makefile.deps
	@touch Makefile.ldeps
	@$(EXPORT) $(MAKE) -f $(MAKEDIR)/Makefile.aux clean 2>&1



# The "make deps" target invokes the Makefile.bash script and tells it to
# refresh the generated Makefile files, such as Makefile.acl2, Makefile.deps,
# Makefile.dirs, and Makefile.ldeps.  This command is generally not needed
# because the other targets will automatically compute these.  But, it might be
# useful if you don't want to do anything except look at dependencies, and may
# be used by the Overkill system to make sure everything is current.

# As a special hack for the int178b directory, Doug has added a check for a
# file named Makefile.csh.  If this file exists, it will be run only when "make
# deps" is invoked!

deps: debug
	@$(EXPORT) sh $(MAKEDIR)/Makefile.bash deps
	@if [ -e Makefile.csh ] ; then \
		if [ -n "$(DEBUG)" ] ; then \
			echo "[Makefile.top]: invoking ./Makefile.csh" ; \
		fi ; \
		./Makefile.csh ; \
	fi



# The "make status" target interacts with CVS and asks for the cvs status.  It
# filters the output through Grep so that instead of seeing pages of
# information, you just see a very terse summary, which is far more useful 99%
# of the time.

status: debug
	@cvs status | grep File



# The "make help" target displays the HELP file from the make directory, which
# gives users an overview of the RAMS system and how to use it.

help: debug
	@cat $(MAKEDIR)/HELP



# The "make breakfast" target provides the user with a tasty breakfast, and 
# shows just how full featured this amazing Make system has become.

breakfast: debug
	@cat $(MAKEDIR)/BREAKFAST


# The "debug" target just prints a message if debugging mode is enabled.  All
# of the other commands "depend on" debug, so if debugging mode is ever turned
# on, we will see it instantly.

debug:
	@if [ -n "$(DEBUG)" ] ; \
	then \
		echo "[Makefile.top]: Debugging Mode is Enabled!" ; \
		echo "EXPORT=$(EXPORT)" ;\
	fi



# Our hybrid Makefile/shell script system is pretty good, but has the following
# problem.  If you type "make foo.cert" and foo.cert already exists, the only
# dependencies which are checked are those in Makefile.top.  But we don't know
# anything about foo.cert here, so Make will think that foo.cert is already up
# to date no matter what it really depends on.  What we really want is to check
# the dependencies in Makefile.aux, but we don't really have any say in the
# matter because Make makes this decision before any rules are consulted, so we
# have no way to stop it from happening without abandoning "make" in favor of a
# "build.sh" approach.

# Our "solution" is the following hack: since all the dependency information is
# already stored in the generated files Makefile.deps, Makefile.ldeps, and
# Makefile.dirs, we will just try to include these files into Makefile.top if
# they exist.  If these files don't exist, chances are pretty good that neither
# does foo.cert, and so Make won't fool itself into thinking that it is current
# and it will do the right thing.

# The only real problem with this solution is that, if these files exist but
# dependencies have changed, then foo.cert might be considered "current" under
# the old dependencies when actually it needs to be updated.  We don't have any
# solution to this problem.  We can only hope that "one build ago"'s
# dependencies are usually pretty accurate.

ifneq "$(wildcard Makefile.deps)" ""
ifneq "$(wildcard Makefile.dirs)" ""
ifneq "$(wildcard Makefile.ldeps)" ""
include Makefile.dirs
ACL2_SYSTEM_BOOKS = $(ACL2_ROOT)/books
include Makefile.deps
include Makefile.ldeps
endif
endif
endif