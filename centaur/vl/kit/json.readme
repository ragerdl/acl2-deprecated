------------------------------------------------------------------------------

                              VL JSON README

------------------------------------------------------------------------------

You can use VL's "json" tool to write programs that process Verilog code

  - in many languages (Ruby, Perl, Python, ...)
  - without writing a robust Verilog parser yourself
  - without using some half-assed "grep"-based parser
  - with a minimum of fuss

The basic flow is (e.g., for Ruby):

 +----------+   (1)   +------+    (2)    +------------+   (3)   +---------+
 | Verilog  | ------> | JSON | --------> | Ruby Data  | ------> | Results |
 |  Files   | vl2json | File | ruby json | (hashes,   |  your   |         |
 |          |         |      |  parser   |  arrays)   | program |         |
 +----------+         +------+           +------------+         +---------+

The remainder of this README has:

  1. How to run "vl json" to get the JSON file      (step 1 above)

  2. How to load the JSON file into your program    (step 2 above)
      - Example scripts for Ruby, Perl, and Python
      - Performance comparisons of JSON libraries

  3. How to write your program                      (step 3 above)
      - Documentation for the JSON data format

  4. Notes
      - How "vl json" might be adapted to better fit your program

------------------------------------------------------------------------------

                    STEP 1.  GENERATING THE JSON FILE.

To see the available command-line options, just run:

    vl help json

A typical invocation might look like this:

    time vl json my_mod.v \         <-- starting files to load
            -s libs/my_lib1 \       <-- search paths for finding
            -s libs/my_lib2              additional modules

If all goes well, this should load my_mod.v and any supporting libraries, then
translate them all into a JSON file named, e.g., my_mod.v.json.

Note: the JSON-encoded, parsed Verilog is quite verbose!  For instance, a 39 MB
Verilog test file (plus its libraries, which I didn't try to measure) produced
a 628 MB output file!

------------------------------------------------------------------------------

                     STEP 2.  PARSING THE JSON FILE.

JSON libraries are available for almost any popular programming language.

  - Ruby, Perl, and Python are discussed below.
  - For other languages, see http://www.json.org/ or try googling

RUBY.

  Loading JSON data into Ruby is mostly a matter of installing the right gem.
  Here are some tips:

  The 'json' gem seems really slow.  I also had to add a :max_nesting=>false
  option to the JSON.parse command, or it would die with an error.  It took a
  little over 4 minutes to load my test file's JSON encoding.  Example code:

      require 'json'
      file = File.open("my_file.v.json")
      text = file.read
      file.close
      parsed = JSON.parse(text, :max_nesting=>false)

  I also tried the 'yajl-ruby' gem, but it also seems slow.

  Fortunately, the 'oj' gem seems much faster!  It takes about 50 seconds to
  load the test file using the following code.  Using :symbol_keys seems to
  make things about 15% faster, but might not be what you want.  Example code:

      require 'oj'
      file = File.open("my_file.v.json")
      text = file.read
      file.close
      design = Oj.load(text, :symbol_keys=>true)

  Note that the above are with Ruby 1.9.3p0, which may be slightly old now.
  Perhaps newer versions of Ruby are faster?

PERL.

  The plain 'JSON' module seems horribly slow (for my test file, I killed the
  job after it had run for over 90 minutes without finishing).

  The JSON::XS module is extremely fast!  It takes only 30 seconds to run the
  example script that loads my test file.  Example code:

    use JSON::XS;

    sub read_whole_file {
      my $filename = shift;
      open (my $fh, "<", $filename) or die("Can't open $filename: $!\n");
      local $/ = undef;
      my $ret = <$fh>;
      close($fh);
      return $ret;
    }

    sub read_json_file {
      my $filename = shift;
      my $text = read_whole_file($filename);
      my $json = new JSON::XS;
      $json->max_depth(20000);
      my $ret = $json->decode($text);
      return $ret;
    }

    my $design = read_json_file('my_file.v.json');


PYTHON.

  The built-in JSON importer is not super fast, but can parse my test file in
  about 2 minutes.  I did have to up the recursion limit in python to avoid a
  stack overflow.  Example code:

    import json
    import sys
    # Upping the recursion limit seems necessary for reading large designs
    sys.setrecursionlimit(20000)

    def read_json(filename):
	with open(filename, 'r') as file:
	    content = file.read()
	    return json.loads(content)

    design = read_json("my_file.v.json")

  There's apparently something called ultrajson for Python that makes JSON
  loading much faster.  I haven't tried it out yet, though.


------------------------------------------------------------------------------

                     STEP 3.  WRITING YOUR PROGRAM.

Once you get the Verilog modules loaded into your program, to do anything with
them you need to know something about the data format.

The top-level JSON object is just a mapping from

    module name --> module body

Each module body is a JSON structure corresponding to the internal module
representation used by VL (a Verilog Library for the ACL2 theorem prover).  You
can find lots of documentation about the data format here:

    http://fv.centtech.com/acl2/latest/doc/frames2.html?topic=VL____MODULES

  +------------------------------------------------------------------------+
  |                                                                        |
  | TIP:                                                                   |
  |   - Click on the yellow + sign next to "VL" on the left frame, then    |
  |   - Click on the + sign next to "VL::modules".                         |
  |                                                                        |
  | Now you have a menu with all the different structures!                 |
  |                                                                        |
  +------------------------------------------------------------------------+

Most structures are very straightforward.  But some others (e.g., expressions
and statements) are perhaps a bit weird.  If you want to deal with these, you
may want to read the documentation carefully to understand how they work.


------------------------------------------------------------------------------

                            MISCELLANEOUS NOTES

Today, "vl json" just parses in the Verilog modules and then writes out their
internal VL representation into JSON.  This is straightforward, and may be
perfectly fine for writing many kinds of programs.

But if you want to write a program that involves some deeper understanding of
the Verilog, then you may still be facing a lot of work.  For instance, suppose
your program wants to follow wires into submodules.  Well, to really do it right,
you may need to handle both named and position-based argument lists, e.g.,

   my_adder adder1 (.o(o), .a(a), .b(b));
   my_adder adder2 (o, a, b);

And you might also need to handle port expressions on the submodule side, e.g.,

   module my_adder (o, a({ahigh, alow}), b);
     input [3:0] ahigh;
     input [3:0] alow;
     ...
   endmodule

And maybe you even need to know the sizes of wires, etc.  The point is,
something that sounds simple can be hard to do in a robust way because of all
the different forms that Verilog can be written in.

If you want to do something tricky like this, the easiest approach may just be
to extend "vl json" to simplify the modules before you process them.

VL has a large number of Verilog-to-Verilog transforms that we can run on the
modules before writing them.  These may be able to really reduce the variety of
structures that your program will need to handle.  To get a rough sense of the
sorts of things VL can do, you might glance through this list of transforms:

    http://fv.centtech.com/acl2/latest/doc/frames2.html?topic=VL____TRANSFORMS

------------------------------------------------------------------------------
