#; Support for Community Books to Go with ACL2 Version 6.1
#; Copyright (C) 2013, Regents of the University of Texas

#; This program is free software; you can redistribute it and/or
#; modify it under the terms of Version 2 of the GNU General Public
#; License as published by the Free Software Foundation.

#; This program is distributed in the hope that it will be useful,
#; but WITHOUT ANY WARRANTY; without even the implied warranty of
#; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#; GNU General Public License for more details.

#; You should have received a copy of the GNU General Public License
#; along with this program; if not, write to the Free Software
#; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#; Written by:  Matt Kaufmann               and J Strother Moore
#; email:       Kaufmann@cs.utexas.edu      and Moore@cs.utexas.edu
#; Department of Computer Sciences
#; University of Texas at Austin
#; Austin, TX 78712-1188 U.S.A.

# See ../Makefile (included via "include" below) for details.  The main
# differences here are in the directories that we descend into, together with
# new targets for setting up symbolic links in those directories to files in
# their corresponding "standard" directories, under ../.

# WARNING:  This mechanism isn't currently set up to use ACL2(r) automatically.
# When you execute make, be sure to use a command of the form
# make ACL2=your_saved_acl2r

SHELL := $(shell which bash)

# Directories that have their own contents, and do not need links, or only
# need some links:
FULLDIRS := nsa fft

# All directories:
ALLDIRS := $(shell find . -type d | fgrep -v .svn)

# Directories that need links:
LINKDIRS := $(filter-out $(FULLDIRS),$(ALLDIRS))

# We run links, even before including ../Makefile-jared, so that
# Makefiles are present.  Use clean-links explicitly to remove links.
# Note that at the end of the following command, we remove any
# symbolic links that should not have been put there.

SAVED_DIR := $(shell pwd)
STD_DIR := $(shell cd .. ; pwd)

$(info Making links...)
LINKS := $(shell \
	(cd $(SAVED_DIR) ;\
	for book_dir in $(LINKDIRS) ; \
	do \
	if [ -d $(STD_DIR)/$$book_dir ] ; then \
	$(SAVED_DIR)/link-up.sh $$book_dir $(STD_DIR) ; \
	fi ; \
	done ; \
	if [ -h workshops/1999/calculus/book/tree.lisp ] ; then \
	rm workshops/1999/calculus/book/tree.lisp ; \
	fi) >& links.log)

# Note that the following assumes that we execute make in this directory.
# Also note that the parent directory provides some directory dependencies
# that may need to be re-thought for the nonstd/ case at some point; but as
# long as things are working, we leave well enough alone.
include ../Makefile-jared

.PHONY: $(EXTRA_TARGETS)
EXTRA_TARGETS := workshops/1999/calculus/book/tree/proof-outline

all: $(EXTRA_TARGETS)

# Warning: targets like all-fasl have not been updated to work for
# nonstd.

clean: clean-more

clean-more:
	rm -f workshops/1999/calculus/book/tree.lisp

clean-links:
	@echo "Cleaning links from directories:"
	@for book_dir in $(LINKDIRS) ; \
	do \
	if [ -d $$book_dir ] ; then \
	cd $$book_dir ; \
	echo "Cleaning links from $$book_dir" ; \
	for file in `\ls` ; \
	do \
	if [ -h $$file ] ; then \
	rm -f $$file ; \
	fi ; \
	done ; \
	cd - > /dev/null ; \
	fi ; \
	done

workshops/1999/calculus/book/proof-outline.cert: workshops/1999/calculus/book/tree.cert

workshops/1999/calculus/book/tree.cert: workshops/1999/calculus/book/tree.lisp
	cd workshops/1999/calculus/book/ ; \
	$(MAKE) tree.cert

workshops/1999/calculus/book/tree.lisp:
	cd workshops/1999/calculus/book ; $(MAKE) -f Makefile-essence tree.lisp

workshops/1999/calculus/book/tree/proof-outline: \
	workshops/1999/calculus/book/tree.cert \
	workshops/1999/calculus/book/proof-outline.cert
	cd workshops/1999/calculus/book/ ; $(MAKE) proof-outline
