------------------------------------------------------------------------------

                              VL LINT README

------------------------------------------------------------------------------

You can use VL's "lint" tool to identify potential problems in Verilog code.

It can warn you about things like:

 - Duplicate module elements
 - Wires driven by multiple sources
 - Implicit truncations and extensions in assignments
 - Unused and unset parts of wires
 - Possible problems with operator precedence
 - Strange statements that sometimes indicate copy/paste errors
 - Potentially skipped wires in expressions like:
       assign bar = (foo0 & foo1 & foo2 & foo4 & foo5)
                                         ^^ where is foo3?


------------------------------------------------------------------------------

                           Running the Linter

To see the available command-line options, just run

   vl help lint

A typical invocation might look like this:

   vl lint my_mod1.v my_mod2.v \     <-- starting files to load
            -s libs/my_lib1 \        <-- search paths for finding
            -s libs/my_lib2               additional modules

The linter will print some progress messages, then writes several text files
containing its report.  (It generally produces too much output, so to try to
filter this out and let you focus on the most likely errors, we split the
output into several files).

Here is a summary:

Generic warnings: (probably the most interesting)
  vl-basic.txt - basic warnings

Multiply driven wires: (sometimes interesting)
  vl-multi.txt - more likely to be problems
  vl-multi-minor.txt - unlikely to be problems

Truncation/Extension warnings: (sometimes interesting)
  vl-trunc.txt - more likely to be problems
  vl-trunc-minor.txt - unlikely to be problems

Fussy size warnings: (sometimes interesting)
  vl-fussy.txt - like truncation warnings on stroids
  vl-fussy-minor.txt - unlikely to be problems

Unconnected wires: (useful when cleaning up)
  vl-disconnected.txt - wires that aren't connected at all
  vl-use-set.txt - wires that seem to be undriven/unused (sometimes wrong)

Skip detection: (only occasionally useful)
  vl-skipdet.txt - high-scoring expressions, more likely to be problems
  vl-skipdet-minor.txt - low-scoring expressions, unlikely to be problems


------------------------------------------------------------------------------

                      Suppressing False Positives

You can tell the linter to ignore certain things by adding comments to your
Verilog source files.  For instance:

  //@VL LINT_IGNORE_TRUNCATION     // to suppress the truncation warning
  assign foo[3:0] = bar[5:0];

  //@VL LINT_IGNORE                // to suppress all warnings
  assign foo[3:0] = bar[5:0];

This feature is probably fancier than anyone needs.  There are also some
command-line options to suppress all warnings for particular modules, or all
warnings of particular types, etc.  See "vl help lint" for details.


------------------------------------------------------------------------------